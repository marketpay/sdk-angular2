/**
 * MarketPay API
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PayInsUniversalPayApi {
    protected basePath = 'https://localhost/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * View a UniversalPay payment
     * 
     * @param payInId The Id of a payment
     */
    public payInsUniversalPayUniversalPayGetPayment(payInId: number, extraHttpRequestParams?: any): Observable<models.UniversalPayPayInsResponse> {
        return this.payInsUniversalPayUniversalPayGetPaymentWithHttpInfo(payInId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a UniversalPay PayIn Request
     * Prepares a payment on UniversalPay. The data returned is used to show the UniversalPay interface to the user.  Once the payment is done, the user will be redirected to one of UrlOk or UrlKo passed parameters.  In order to redirect the user, a Post request with Content-Type of application/x-www-form-urlencoded must be executed from the user&#39;s browser.  Below there is an example of a request where the params surrounded by curly braces have to be replaced with the response&#39;s params.  curl -X POST -H \&quot;Content-Type: application/x-www-form-urlencoded\&quot; -H \&quot;Accept: text/html,application/xhtml+xml,application/xml;q&#x3D;0.9,image/webp,*_/_*;q&#x3D;0.8\&quot; -H \&quot;Cache-Control: no-cache\&quot; -H \&quot;Postman-Token: c313f10b-0de1-227e-53d2-f721f25cd79d\&quot; -d &#39;Ds_SignatureVersion&#x3D;{Ds_SignatureVersion}&amp;amp;Ds_MerchantParameters&#x3D;{Ds_MerchantParameters}&amp;amp;Ds_Signature&#x3D;{Ds_Signature}&#39; \&quot;{Url}\&quot;
     * @param universalPayPayIn UniversalPay PayIn Request Object params
     */
    public payInsUniversalPayUniversalPayPostPaymentByWeb(universalPayPayIn?: models.UniversalPayPayByWebPost, extraHttpRequestParams?: any): Observable<models.UniversalPayPayByWebResponse> {
        return this.payInsUniversalPayUniversalPayPostPaymentByWebWithHttpInfo(universalPayPayIn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a UniversalPay Payment Refund
     * A PayIn Refund is a request to reimburse a user on their payment card. The money which has already been paid will automatically go back to the user’s bank account.              Minimum amount to refund is 1€.              If you&#39;re doing a partial Refund, note that you can only refund the same amount on the same transaction once per day (this is to prevent unintended duplicate refunds). After 24h you can do another refund of the same amount on the same transaction. If it is a different amount on the same transaction, there is not this limit.              If you do not specify DebitedFunds and Fees parameters, it will automatically fully refund the PayIn. However if you do provide one or the other, you must provide both. Note that Fees must be negative if you wish to refund them - adding a positive value for the Fees is a way to charge your customers for the Refund (in the same way you might for a PayIn, Transfer or any other Transaction
     * @param payInId The Id of a PayIn
     * @param universalPayRefund Refund Object params
     */
    public payInsUniversalPayUniversalPayPostRefund(payInId: number, universalPayRefund?: models.UniversalPayRefundPost, extraHttpRequestParams?: any): Observable<models.UniversalPayRefundResponse> {
        return this.payInsUniversalPayUniversalPayPostRefundWithHttpInfo(payInId, universalPayRefund, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param universalPaySaveCard 
     */
    public payInsUniversalPayUniversalPaySaveCard(universalPaySaveCard?: models.UniversalPayTokenRequestPost, extraHttpRequestParams?: any): Observable<models.UniversalPayPayByWebResponse> {
        return this.payInsUniversalPayUniversalPaySaveCardWithHttpInfo(universalPaySaveCard, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * View a UniversalPay payment
     * 
     * @param payInId The Id of a payment
     */
    public payInsUniversalPayUniversalPayGetPaymentWithHttpInfo(payInId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/PayInsUniversalPay/payments/${PayInId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payInId' is not null or undefined
        if (payInId === null || payInId === undefined) {
            throw new Error('Required parameter payInId was null or undefined when calling payInsUniversalPayUniversalPayGetPayment.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a UniversalPay PayIn Request
     * Prepares a payment on UniversalPay. The data returned is used to show the UniversalPay interface to the user.  Once the payment is done, the user will be redirected to one of UrlOk or UrlKo passed parameters.  In order to redirect the user, a Post request with Content-Type of application/x-www-form-urlencoded must be executed from the user&#39;s browser.  Below there is an example of a request where the params surrounded by curly braces have to be replaced with the response&#39;s params.  curl -X POST -H \&quot;Content-Type: application/x-www-form-urlencoded\&quot; -H \&quot;Accept: text/html,application/xhtml+xml,application/xml;q&#x3D;0.9,image/webp,*_/_*;q&#x3D;0.8\&quot; -H \&quot;Cache-Control: no-cache\&quot; -H \&quot;Postman-Token: c313f10b-0de1-227e-53d2-f721f25cd79d\&quot; -d &#39;Ds_SignatureVersion&#x3D;{Ds_SignatureVersion}&amp;amp;Ds_MerchantParameters&#x3D;{Ds_MerchantParameters}&amp;amp;Ds_Signature&#x3D;{Ds_Signature}&#39; \&quot;{Url}\&quot;
     * @param universalPayPayIn UniversalPay PayIn Request Object params
     */
    public payInsUniversalPayUniversalPayPostPaymentByWebWithHttpInfo(universalPayPayIn?: models.UniversalPayPayByWebPost, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/PayInsUniversalPay/payments/web`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: universalPayPayIn == null ? '' : JSON.stringify(universalPayPayIn), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a UniversalPay Payment Refund
     * A PayIn Refund is a request to reimburse a user on their payment card. The money which has already been paid will automatically go back to the user’s bank account.              Minimum amount to refund is 1€.              If you&#39;re doing a partial Refund, note that you can only refund the same amount on the same transaction once per day (this is to prevent unintended duplicate refunds). After 24h you can do another refund of the same amount on the same transaction. If it is a different amount on the same transaction, there is not this limit.              If you do not specify DebitedFunds and Fees parameters, it will automatically fully refund the PayIn. However if you do provide one or the other, you must provide both. Note that Fees must be negative if you wish to refund them - adding a positive value for the Fees is a way to charge your customers for the Refund (in the same way you might for a PayIn, Transfer or any other Transaction
     * @param payInId The Id of a PayIn
     * @param universalPayRefund Refund Object params
     */
    public payInsUniversalPayUniversalPayPostRefundWithHttpInfo(payInId: number, universalPayRefund?: models.UniversalPayRefundPost, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/PayInsUniversalPay/payments/${PayInId}/refunds`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payInId' is not null or undefined
        if (payInId === null || payInId === undefined) {
            throw new Error('Required parameter payInId was null or undefined when calling payInsUniversalPayUniversalPayPostRefund.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: universalPayRefund == null ? '' : JSON.stringify(universalPayRefund), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param universalPaySaveCard 
     */
    public payInsUniversalPayUniversalPaySaveCardWithHttpInfo(universalPaySaveCard?: models.UniversalPayTokenRequestPost, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/PayInsUniversalPay/cards`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: universalPaySaveCard == null ? '' : JSON.stringify(universalPaySaveCard), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
