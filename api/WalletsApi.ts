/**
 * MarketPay API
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class WalletsApi {
    protected basePath = 'https://localhost/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * View a Wallet
     * A Wallet is an object in which PayIns and Transfers from users are stored in order to collect money. You can pay into a Wallet, withdraw funds from a wallet or transfer funds from a Wallet to another Wallet.              Once a wallet is created, its Currency can not be changed
     * @param walletId The Id of a wallet
     */
    public walletsGet(walletId: number, extraHttpRequestParams?: any): Observable<models.WalletResponse> {
        return this.walletsGetWithHttpInfo(walletId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param page 
     * @param perPage 
     */
    public walletsGetList(page?: number, perPage?: number, extraHttpRequestParams?: any): Observable<models.ResponseListWalletResponse> {
        return this.walletsGetListWithHttpInfo(page, perPage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List a Wallet&#39;s Transactions
     * 
     * @param walletId The Id of a wallet
     * @param page The page number of results you wish to return
     * @param perPage The number of results to return per page
     */
    public walletsGetTransactionList(walletId: number, page?: number, perPage?: number, extraHttpRequestParams?: any): Observable<Array<models.TransactionResponse>> {
        return this.walletsGetTransactionListWithHttpInfo(walletId, page, perPage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a Wallet
     * 
     * @param wallet Wallet Object params
     */
    public walletsPost(wallet?: models.WalletPost, extraHttpRequestParams?: any): Observable<models.WalletResponse> {
        return this.walletsPostWithHttpInfo(wallet, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update a Wallet
     * 
     * @param walletId The Id of a wallet
     * @param wallet Wallet Object params
     */
    public walletsPut(walletId: number, wallet?: models.WalletPut, extraHttpRequestParams?: any): Observable<models.WalletResponse> {
        return this.walletsPutWithHttpInfo(walletId, wallet, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * View a Wallet
     * A Wallet is an object in which PayIns and Transfers from users are stored in order to collect money. You can pay into a Wallet, withdraw funds from a wallet or transfer funds from a Wallet to another Wallet.              Once a wallet is created, its Currency can not be changed
     * @param walletId The Id of a wallet
     */
    public walletsGetWithHttpInfo(walletId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/Wallets/${WalletId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'walletId' is not null or undefined
        if (walletId === null || walletId === undefined) {
            throw new Error('Required parameter walletId was null or undefined when calling walletsGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param page 
     * @param perPage 
     */
    public walletsGetListWithHttpInfo(page?: number, perPage?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/Wallets`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            if(page instanceof Date) {
                queryParameters.set('Page', <any>page.d.toISOString());
            } else {
                queryParameters.set('Page', <any>page);
            }
        }

        if (perPage !== undefined) {
            if(perPage instanceof Date) {
                queryParameters.set('Per_Page', <any>perPage.d.toISOString());
            } else {
                queryParameters.set('Per_Page', <any>perPage);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * List a Wallet&#39;s Transactions
     * 
     * @param walletId The Id of a wallet
     * @param page The page number of results you wish to return
     * @param perPage The number of results to return per page
     */
    public walletsGetTransactionListWithHttpInfo(walletId: number, page?: number, perPage?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/Wallets/${WalletId}/transactions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'walletId' is not null or undefined
        if (walletId === null || walletId === undefined) {
            throw new Error('Required parameter walletId was null or undefined when calling walletsGetTransactionList.');
        }
        if (page !== undefined) {
            if(page instanceof Date) {
                queryParameters.set('Page', <any>page.d.toISOString());
            } else {
                queryParameters.set('Page', <any>page);
            }
        }

        if (perPage !== undefined) {
            if(perPage instanceof Date) {
                queryParameters.set('per_page', <any>perPage.d.toISOString());
            } else {
                queryParameters.set('per_page', <any>perPage);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a Wallet
     * 
     * @param wallet Wallet Object params
     */
    public walletsPostWithHttpInfo(wallet?: models.WalletPost, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/Wallets`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: wallet == null ? '' : JSON.stringify(wallet), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update a Wallet
     * 
     * @param walletId The Id of a wallet
     * @param wallet Wallet Object params
     */
    public walletsPutWithHttpInfo(walletId: number, wallet?: models.WalletPut, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2.01/Wallets/${WalletId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'walletId' is not null or undefined
        if (walletId === null || walletId === undefined) {
            throw new Error('Required parameter walletId was null or undefined when calling walletsPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: wallet == null ? '' : JSON.stringify(wallet), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
